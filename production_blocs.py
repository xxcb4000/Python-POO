

from abc import ABC, abstractmethod
import time
import random
import uuid

# Classe abstraite
class Machine(ABC):
    @abstractmethod
    def traiter(self, produit):
        pass

# Repr√©sente un bloc de b√©ton avec historique
class Produit:
    def __init__(self, type_bloc):
        self.id = str(uuid.uuid4())[:8]
        self.type_bloc = type_bloc
        self.log = []

    def ajouter_log(self, machine, √©tat):
        horodatage = time.strftime("%H:%M:%S")
        self.log.append(f"[{horodatage}] {machine}: {√©tat}")

# Machines concr√®tes
class M√©langeurB√©ton(Machine):
    def traiter(self, produit):
        produit.ajouter_log("M√©langeur", "M√©lange des mati√®res premi√®res")
        time.sleep(0.2)
        if random.random() < 0.02:
            raise Exception("Panne du m√©langeur")
        return produit

class PresseBlocs(Machine):
    def traiter(self, produit):
        produit.ajouter_log("Presse", "Pressage en cours")
        time.sleep(0.3)
        if random.random() < 0.05:
            raise Exception("Bloc mal form√©")
        return produit

class S√©cheur(Machine):
    def traiter(self, produit):
        produit.ajouter_log("S√©cheur", "S√©chage √† 50¬∞C")
        time.sleep(0.2)
        return produit

class Contr√¥leQualit√©(Machine):
    def traiter(self, produit):
        produit.ajouter_log("Contr√¥leQualit√©", "Inspection visuelle")
        time.sleep(0.1)
        if random.random() < 0.05:
            raise Exception("Bloc non conforme : fissure d√©tect√©e")
        produit.ajouter_log("Contr√¥leQualit√©", "Bloc valid√©")
        return produit

# Pipeline
pipeline = [
    M√©langeurB√©ton(),
    PresseBlocs(),
    S√©cheur(),
    Contr√¥leQualit√©()
]

# Simulation d‚Äôune ligne de production
def ex√©cuter_ligne_production(type_bloc):
    produit = Produit(type_bloc)
    try:
        for machine in pipeline:
            produit = machine.traiter(produit)
        print(f"‚úÖ Bloc produit avec succ√®s : ID {produit.id}")
    except Exception as e:
        produit.ajouter_log("ERREUR", str(e))
        print(f"‚ùå √âchec de production : {e} (ID {produit.id})")

    print("üìã Journal de production :")
    for ligne in produit.log:
        print(ligne)

# Exemple d'ex√©cution
if __name__ == "__main__":
    ex√©cuter_ligne_production("Bloc creux")